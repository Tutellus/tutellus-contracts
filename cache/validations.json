{
  "version": "3.2",
  "log": [
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "8fbf82a7c4eb8c27572926c5ccb0bf93b2a3334e6edd1b8b2216920e5aa4aa33",
          "withoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa",
          "linkedWithoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "ac56c65fa3040d17a29d946b3b9710d978b16069c314d7eeb4d3fc1412dd3171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProofUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol:14",
        "version": {
          "withMetadata": "73f3b39d72774b4d11f77bbd05464ca592d4fa5e8f8fa04be323f667a192b57d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TutellusDeployer": {
        "src": "contracts/TutellusDeployer.sol:11",
        "version": {
          "withMetadata": "b73dd8830e36b41572ff0bf5fb7878103281ca2c0dc804c2dd3bf554d990e0b1",
          "withoutMetadata": "aadcb4c742fddf21628123f2a6d04e73c1737bf1462c0cbb13f4b081a10fc664",
          "linkedWithoutMetadata": "aadcb4c742fddf21628123f2a6d04e73c1737bf1462c0cbb13f4b081a10fc664"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDeployer",
            "src": "contracts/TutellusDeployer.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDeployer",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:13"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rolemanager",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:14"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:15"
            },
            {
              "contract": "TutellusDeployer",
              "label": "holdersVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:16"
            },
            {
              "contract": "TutellusDeployer",
              "label": "farmingVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:17"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rewardsVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:18"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasuryVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusDistributionVault": {
        "src": "contracts/TutellusDistributionVault.sol:7",
        "version": {
          "withMetadata": "e3d4cb81997ef02fe88627ea3c1ff34f95e9cf5cf3cf8c4e19f7f6407e6a411a",
          "withoutMetadata": "505dbdb4533ae0676681a2934d7f20411617cbe851363519bbcd5958fb2784fd",
          "linkedWithoutMetadata": "505dbdb4533ae0676681a2934d7f20411617cbe851363519bbcd5958fb2784fd"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allocated(address)",
          "released(address)",
          "distributed(address)",
          "releasePerBlock(address)",
          "endBlock(address)",
          "startBlock(address)",
          "available(address)",
          "distribute(address)",
          "claim()",
          "addStakeholder(address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDistributionVault",
            "src": "contracts/TutellusDistributionVault.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDistributionVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDistributionVault.sol:9"
            },
            {
              "contract": "TutellusDistributionVault",
              "label": "stakeholders",
              "type": "t_mapping(t_address,t_struct(Stakeholder)1899_storage)",
              "src": "contracts/TutellusDistributionVault.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Stakeholder)1899_storage)": {
              "label": "mapping(address => struct TutellusDistributionVault.Stakeholder)"
            },
            "t_struct(Stakeholder)1899_storage": {
              "label": "struct TutellusDistributionVault.Stakeholder",
              "members": [
                {
                  "label": "distributed",
                  "type": "t_uint256"
                },
                {
                  "label": "releasePerBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusMerkleDistributorUpdateable": {
        "src": "contracts/TutellusMerkleDistributorUpdateable.sol:8",
        "version": {
          "withMetadata": "6757a38a1f25927e4b233626991693b26ee7177a971ec2b1c532c92e2cc0d985",
          "withoutMetadata": "c1879de1ee43ebf2402ad60af47aa9f718059ba557a3fc53f22a719bb203eb36",
          "linkedWithoutMetadata": "c1879de1ee43ebf2402ad60af47aa9f718059ba557a3fc53f22a719bb203eb36"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "MerkleProofUpgradeable"
        ],
        "methods": [
          "updateMerkleRoot(bytes32,string)",
          "alreadyClaimed(address)",
          "leftToClaim(uint256,address,uint256,bytes32[])",
          "claim(uint256,address,uint256,bytes32[])",
          "(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusMerkleDistributorUpdateable",
            "src": "contracts/TutellusMerkleDistributorUpdateable.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:10"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "merkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:11"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "uri",
              "type": "t_string_storage",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:12"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "_alreadyClaimed",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusRoleManager": {
        "src": "contracts/TutellusRoleManager.sol:6",
        "version": {
          "withMetadata": "30b1e9951d705bb937af6f8595172174d31ec9700db3f2a48fbf617fe837f67a",
          "withoutMetadata": "4d412d66cc9cc4db52128944228a567d6f6bb7f807c471797750b599de51bc28",
          "linkedWithoutMetadata": "4d412d66cc9cc4db52128944228a567d6f6bb7f807c471797750b599de51bc28"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "deployer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusRoleManager",
            "src": "contracts/TutellusRoleManager.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusRoleManager",
              "label": "_deployer",
              "type": "t_address",
              "src": "contracts/TutellusRoleManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusTreasuryVault": {
        "src": "contracts/TutellusTreasuryVault.sol:7",
        "version": {
          "withMetadata": "db69a7e18c1d7a2b8e0b8ff720e4a04fcda5be8a291924f9d04f338398ea847a",
          "withoutMetadata": "3c5c5ff8e5ec0ddc56ff7a8451d077f65c05c5631887e43ac6c3560514255f2c",
          "linkedWithoutMetadata": "3c5c5ff8e5ec0ddc56ff7a8451d077f65c05c5631887e43ac6c3560514255f2c"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "released()",
          "releasedRange(uint256,uint256)",
          "updateTreasury(address)",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusTreasuryVault",
            "src": "contracts/TutellusTreasuryVault.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusTreasuryVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:9"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:10"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:12"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:13"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:14"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusYFRewardsVault": {
        "src": "contracts/TutellusYFRewardsVault.sol:7",
        "version": {
          "withMetadata": "c25b2ef70e00bde40b8d779c02ee6343224ad6315b6a80f793a1065f779f649e",
          "withoutMetadata": "5083a2c0649f12e211b53ebb872f3b62a40cf1a43ddbfb9d9837aa15b7ca5379",
          "linkedWithoutMetadata": "5083a2c0649f12e211b53ebb872f3b62a40cf1a43ddbfb9d9837aa15b7ca5379"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256)",
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusYFRewardsVault",
            "src": "contracts/TutellusYFRewardsVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_id",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:9"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_address",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TutellusYFRewardsVault.sol:10"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_allocation",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:11"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_released",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:12"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_distributed",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:13"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:15"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:16"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:17"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:18"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_total",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:19"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusYFRewardsVault.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITutellusERC20": {
        "src": "contracts/interfaces/ITutellusERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlProxyPausable": {
        "src": "contracts/utils/AccessControlProxyPausable.sol:8",
        "inherit": [
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "hasRole(bytes32,address)",
          "pause()",
          "unpause()",
          "updateManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlProxyPausable",
              "label": "_manager",
              "type": "t_address",
              "src": "contracts/utils/AccessControlProxyPausable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusERC20": {
        "src": "contracts/utils/TutellusERC20.sol:7",
        "version": {
          "withMetadata": "9cf15f237d300830ffc66e819671f1dab81a45337903171e79c0f7aa216bda5f",
          "withoutMetadata": "f910ad5f5b1ac6b53e05141b68e1c5a05dd01b9abb06006dc0ae695afe9971d3",
          "linkedWithoutMetadata": "f910ad5f5b1ac6b53e05141b68e1c5a05dd01b9abb06006dc0ae695afe9971d3"
        },
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)",
          "isMinter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusERC20",
            "src": "contracts/utils/TutellusERC20.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/TutellusERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "8fbf82a7c4eb8c27572926c5ccb0bf93b2a3334e6edd1b8b2216920e5aa4aa33",
          "withoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa",
          "linkedWithoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "ac56c65fa3040d17a29d946b3b9710d978b16069c314d7eeb4d3fc1412dd3171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProofUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol:14",
        "version": {
          "withMetadata": "73f3b39d72774b4d11f77bbd05464ca592d4fa5e8f8fa04be323f667a192b57d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TutellusDeployer": {
        "src": "contracts/TutellusDeployer.sol:11",
        "version": {
          "withMetadata": "f1fea3fe00cde1e77fd40cac30cd802a43d10bcaf2078a5003339e1760ba5a4e",
          "withoutMetadata": "1ec8724d76c53ca2dd24246a6025543e87094e65e32169a5e8f3977b4f74c394",
          "linkedWithoutMetadata": "1ec8724d76c53ca2dd24246a6025543e87094e65e32169a5e8f3977b4f74c394"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDeployer",
            "src": "contracts/TutellusDeployer.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDeployer",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:13"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rolemanager",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:14"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:15"
            },
            {
              "contract": "TutellusDeployer",
              "label": "holdersVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:16"
            },
            {
              "contract": "TutellusDeployer",
              "label": "farmingVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:17"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rewardsVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:18"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasuryVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusDistributionVault": {
        "src": "contracts/TutellusDistributionVault.sol:7",
        "version": {
          "withMetadata": "e3d4cb81997ef02fe88627ea3c1ff34f95e9cf5cf3cf8c4e19f7f6407e6a411a",
          "withoutMetadata": "505dbdb4533ae0676681a2934d7f20411617cbe851363519bbcd5958fb2784fd",
          "linkedWithoutMetadata": "505dbdb4533ae0676681a2934d7f20411617cbe851363519bbcd5958fb2784fd"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allocated(address)",
          "released(address)",
          "distributed(address)",
          "releasePerBlock(address)",
          "endBlock(address)",
          "startBlock(address)",
          "available(address)",
          "distribute(address)",
          "claim()",
          "addStakeholder(address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDistributionVault",
            "src": "contracts/TutellusDistributionVault.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDistributionVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDistributionVault.sol:9"
            },
            {
              "contract": "TutellusDistributionVault",
              "label": "stakeholders",
              "type": "t_mapping(t_address,t_struct(Stakeholder)1890_storage)",
              "src": "contracts/TutellusDistributionVault.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Stakeholder)1890_storage)": {
              "label": "mapping(address => struct TutellusDistributionVault.Stakeholder)"
            },
            "t_struct(Stakeholder)1890_storage": {
              "label": "struct TutellusDistributionVault.Stakeholder",
              "members": [
                {
                  "label": "distributed",
                  "type": "t_uint256"
                },
                {
                  "label": "releasePerBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusFarming": {
        "src": "contracts/TutellusFarming.sol:8",
        "version": {
          "withMetadata": "b50a56d21125cca3bf5641dc4200f4242bcde3be39406b43b515b63e14345cb8",
          "withoutMetadata": "f3a234fa77a8bc5e4f4870216a89f114c26b87831170659e92d94a24e650b398",
          "linkedWithoutMetadata": "f3a234fa77a8bc5e4f4870216a89f114c26b87831170659e92d94a24e650b398"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "depositFrom(address,uint256)",
          "withdraw(uint256)",
          "claim()",
          "toggleAutoreward()",
          "pendingRewards(address)",
          "(address,address,address)",
          "getTokenGap()",
          "syncBalance(address)",
          "getUserBalance(address)",
          "migrate(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusFarming",
            "src": "contracts/TutellusFarming.sol:173"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusFarming",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusFarming.sol:10"
            },
            {
              "contract": "TutellusFarming",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/TutellusFarming.sol:11"
            },
            {
              "contract": "TutellusFarming",
              "label": "autoreward",
              "type": "t_bool",
              "src": "contracts/TutellusFarming.sol:13"
            },
            {
              "contract": "TutellusFarming",
              "label": "balance",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:15"
            },
            {
              "contract": "TutellusFarming",
              "label": "accRewardsPerShare",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:16"
            },
            {
              "contract": "TutellusFarming",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:17"
            },
            {
              "contract": "TutellusFarming",
              "label": "lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:19"
            },
            {
              "contract": "TutellusFarming",
              "label": "stakers",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:20"
            },
            {
              "contract": "TutellusFarming",
              "label": "_userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)2297_storage)",
              "src": "contracts/TutellusFarming.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)2297_storage)": {
              "label": "mapping(address => struct TutellusFarming.UserInfo)"
            },
            "t_struct(UserInfo)2297_storage": {
              "label": "struct TutellusFarming.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "notClaimed",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusMerkleDistributorUpdateable": {
        "src": "contracts/TutellusMerkleDistributorUpdateable.sol:8",
        "version": {
          "withMetadata": "6757a38a1f25927e4b233626991693b26ee7177a971ec2b1c532c92e2cc0d985",
          "withoutMetadata": "c1879de1ee43ebf2402ad60af47aa9f718059ba557a3fc53f22a719bb203eb36",
          "linkedWithoutMetadata": "c1879de1ee43ebf2402ad60af47aa9f718059ba557a3fc53f22a719bb203eb36"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "MerkleProofUpgradeable"
        ],
        "methods": [
          "updateMerkleRoot(bytes32,string)",
          "alreadyClaimed(address)",
          "leftToClaim(uint256,address,uint256,bytes32[])",
          "claim(uint256,address,uint256,bytes32[])",
          "(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusMerkleDistributorUpdateable",
            "src": "contracts/TutellusMerkleDistributorUpdateable.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:10"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "merkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:11"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "uri",
              "type": "t_string_storage",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:12"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "_alreadyClaimed",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusRoleManager": {
        "src": "contracts/TutellusRoleManager.sol:6",
        "version": {
          "withMetadata": "30b1e9951d705bb937af6f8595172174d31ec9700db3f2a48fbf617fe837f67a",
          "withoutMetadata": "4d412d66cc9cc4db52128944228a567d6f6bb7f807c471797750b599de51bc28",
          "linkedWithoutMetadata": "4d412d66cc9cc4db52128944228a567d6f6bb7f807c471797750b599de51bc28"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "deployer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusRoleManager",
            "src": "contracts/TutellusRoleManager.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusRoleManager",
              "label": "_deployer",
              "type": "t_address",
              "src": "contracts/TutellusRoleManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusStaking": {
        "src": "contracts/TutellusStaking.sol:8",
        "version": {
          "withMetadata": "6dae6c7e0a1030d6b91aaed5a4ee7d6e9670d0670afd7fca13f16dbe91866b0f",
          "withoutMetadata": "6ccf2d2f28b1cbcfa1cb7fa13b23f651954c71adf7829acdd84fc8de42f0436e",
          "linkedWithoutMetadata": "6ccf2d2f28b1cbcfa1cb7fa13b23f651954c71adf7829acdd84fc8de42f0436e"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFees(uint256,uint256)",
          "setFeeInterval(uint256)",
          "depositFrom(address,uint256)",
          "withdraw(uint256)",
          "claim()",
          "toggleAutoreward()",
          "getFee(address)",
          "getBlocksLeft(address)",
          "pendingRewards(address)",
          "(address,address,address,uint256,uint256,uint256)",
          "getTokenGap()",
          "syncBalance(address)",
          "getUserBalance(address)",
          "migrate(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusStaking",
            "src": "contracts/TutellusStaking.sol:225"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusStaking",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusStaking.sol:10"
            },
            {
              "contract": "TutellusStaking",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/TutellusStaking.sol:11"
            },
            {
              "contract": "TutellusStaking",
              "label": "autoreward",
              "type": "t_bool",
              "src": "contracts/TutellusStaking.sol:13"
            },
            {
              "contract": "TutellusStaking",
              "label": "balance",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:15"
            },
            {
              "contract": "TutellusStaking",
              "label": "minFee",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:16"
            },
            {
              "contract": "TutellusStaking",
              "label": "maxFee",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:17"
            },
            {
              "contract": "TutellusStaking",
              "label": "accRewardsPerShare",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:18"
            },
            {
              "contract": "TutellusStaking",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:19"
            },
            {
              "contract": "TutellusStaking",
              "label": "lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:21"
            },
            {
              "contract": "TutellusStaking",
              "label": "feeInterval",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:22"
            },
            {
              "contract": "TutellusStaking",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:23"
            },
            {
              "contract": "TutellusStaking",
              "label": "stakers",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:24"
            },
            {
              "contract": "TutellusStaking",
              "label": "_userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3411_storage)",
              "src": "contracts/TutellusStaking.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3411_storage)": {
              "label": "mapping(address => struct TutellusStaking.UserInfo)"
            },
            "t_struct(UserInfo)3411_storage": {
              "label": "struct TutellusStaking.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "notClaimed",
                  "type": "t_uint256"
                },
                {
                  "label": "endInterval",
                  "type": "t_uint256"
                },
                {
                  "label": "minFee",
                  "type": "t_uint256"
                },
                {
                  "label": "maxFee",
                  "type": "t_uint256"
                },
                {
                  "label": "feeInterval",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusTreasuryVault": {
        "src": "contracts/TutellusTreasuryVault.sol:7",
        "version": {
          "withMetadata": "db69a7e18c1d7a2b8e0b8ff720e4a04fcda5be8a291924f9d04f338398ea847a",
          "withoutMetadata": "3c5c5ff8e5ec0ddc56ff7a8451d077f65c05c5631887e43ac6c3560514255f2c",
          "linkedWithoutMetadata": "3c5c5ff8e5ec0ddc56ff7a8451d077f65c05c5631887e43ac6c3560514255f2c"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "released()",
          "releasedRange(uint256,uint256)",
          "updateTreasury(address)",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusTreasuryVault",
            "src": "contracts/TutellusTreasuryVault.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusTreasuryVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:9"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:10"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:12"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:13"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:14"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusYFRewardsVault": {
        "src": "contracts/TutellusYFRewardsVault.sol:7",
        "version": {
          "withMetadata": "c25b2ef70e00bde40b8d779c02ee6343224ad6315b6a80f793a1065f779f649e",
          "withoutMetadata": "5083a2c0649f12e211b53ebb872f3b62a40cf1a43ddbfb9d9837aa15b7ca5379",
          "linkedWithoutMetadata": "5083a2c0649f12e211b53ebb872f3b62a40cf1a43ddbfb9d9837aa15b7ca5379"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256)",
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusYFRewardsVault",
            "src": "contracts/TutellusYFRewardsVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_id",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:9"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_address",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TutellusYFRewardsVault.sol:10"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_allocation",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:11"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_released",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:12"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_distributed",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:13"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:15"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:16"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:17"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:18"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_total",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:19"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusYFRewardsVault.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/interfaces/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITutellusERC20": {
        "src": "contracts/interfaces/ITutellusERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITutellusYFRewardsVault": {
        "src": "contracts/interfaces/ITutellusYFRewardsVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)",
          "initialize(address,address,uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlProxyPausable": {
        "src": "contracts/utils/AccessControlProxyPausable.sol:8",
        "inherit": [
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "hasRole(bytes32,address)",
          "pause()",
          "unpause()",
          "updateManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlProxyPausable",
              "label": "_manager",
              "type": "t_address",
              "src": "contracts/utils/AccessControlProxyPausable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusERC20": {
        "src": "contracts/utils/TutellusERC20.sol:7",
        "version": {
          "withMetadata": "9cf15f237d300830ffc66e819671f1dab81a45337903171e79c0f7aa216bda5f",
          "withoutMetadata": "f910ad5f5b1ac6b53e05141b68e1c5a05dd01b9abb06006dc0ae695afe9971d3",
          "linkedWithoutMetadata": "f910ad5f5b1ac6b53e05141b68e1c5a05dd01b9abb06006dc0ae695afe9971d3"
        },
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)",
          "isMinter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusERC20",
            "src": "contracts/utils/TutellusERC20.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/TutellusERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "8fbf82a7c4eb8c27572926c5ccb0bf93b2a3334e6edd1b8b2216920e5aa4aa33",
          "withoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa",
          "linkedWithoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "ac56c65fa3040d17a29d946b3b9710d978b16069c314d7eeb4d3fc1412dd3171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProofUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol:14",
        "version": {
          "withMetadata": "73f3b39d72774b4d11f77bbd05464ca592d4fa5e8f8fa04be323f667a192b57d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TutellusDeployer": {
        "src": "contracts/TutellusDeployer.sol:11",
        "version": {
          "withMetadata": "aeaa04c554b62a91d509933172308f113665dd6eb11b9ddd6fae84605e228bb5",
          "withoutMetadata": "2da7d72c7d33617b5c9c585efa99396b3c1a6b559bd04fc1b324f15e885b5c4b",
          "linkedWithoutMetadata": "2da7d72c7d33617b5c9c585efa99396b3c1a6b559bd04fc1b324f15e885b5c4b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDeployer",
            "src": "contracts/TutellusDeployer.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDeployer",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:13"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rolemanager",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:14"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:15"
            },
            {
              "contract": "TutellusDeployer",
              "label": "holdersVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:16"
            },
            {
              "contract": "TutellusDeployer",
              "label": "farmingVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:17"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rewardsVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:18"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasuryVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusDistributionVault": {
        "src": "contracts/TutellusDistributionVault.sol:7",
        "version": {
          "withMetadata": "78b863334d0e05869aa42b9ab387c5eff7bb2b350124c7904e7045dec5d6891c",
          "withoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131",
          "linkedWithoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allocated(address)",
          "released(address)",
          "distributed(address)",
          "releasePerBlock(address)",
          "endBlock(address)",
          "startBlock(address)",
          "available(address)",
          "distribute(address)",
          "claim()",
          "addStakeholder(address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDistributionVault",
            "src": "contracts/TutellusDistributionVault.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDistributionVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDistributionVault.sol:9"
            },
            {
              "contract": "TutellusDistributionVault",
              "label": "stakeholders",
              "type": "t_mapping(t_address,t_struct(Stakeholder)1890_storage)",
              "src": "contracts/TutellusDistributionVault.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Stakeholder)1890_storage)": {
              "label": "mapping(address => struct TutellusDistributionVault.Stakeholder)"
            },
            "t_struct(Stakeholder)1890_storage": {
              "label": "struct TutellusDistributionVault.Stakeholder",
              "members": [
                {
                  "label": "distributed",
                  "type": "t_uint256"
                },
                {
                  "label": "releasePerBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusMerkleDistributorUpdateable": {
        "src": "contracts/TutellusMerkleDistributorUpdateable.sol:8",
        "version": {
          "withMetadata": "feb4c079188dd57394251a46648ff5ca31df08523a67827df3442f154bbba96e",
          "withoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a",
          "linkedWithoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "MerkleProofUpgradeable"
        ],
        "methods": [
          "updateMerkleRoot(bytes32,string)",
          "alreadyClaimed(address)",
          "leftToClaim(uint256,address,uint256,bytes32[])",
          "claim(uint256,address,uint256,bytes32[])",
          "(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusMerkleDistributorUpdateable",
            "src": "contracts/TutellusMerkleDistributorUpdateable.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:10"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "merkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:11"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "uri",
              "type": "t_string_storage",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:12"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "_alreadyClaimed",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusRoleManager": {
        "src": "contracts/TutellusRoleManager.sol:6",
        "version": {
          "withMetadata": "30b1e9951d705bb937af6f8595172174d31ec9700db3f2a48fbf617fe837f67a",
          "withoutMetadata": "4d412d66cc9cc4db52128944228a567d6f6bb7f807c471797750b599de51bc28",
          "linkedWithoutMetadata": "4d412d66cc9cc4db52128944228a567d6f6bb7f807c471797750b599de51bc28"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "deployer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusRoleManager",
            "src": "contracts/TutellusRoleManager.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusRoleManager",
              "label": "_deployer",
              "type": "t_address",
              "src": "contracts/TutellusRoleManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusTreasuryVault": {
        "src": "contracts/TutellusTreasuryVault.sol:7",
        "version": {
          "withMetadata": "5f3f03a30550e041f2da998f529138df313d10f2de3f438af0ca3dbb1262a896",
          "withoutMetadata": "b59f58ef81fd5d276bfe6c1d137ef768da367d704f5c6a4f44c56a6b344aabf9",
          "linkedWithoutMetadata": "b59f58ef81fd5d276bfe6c1d137ef768da367d704f5c6a4f44c56a6b344aabf9"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "released()",
          "releasedRange(uint256,uint256)",
          "updateTreasury(address)",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusTreasuryVault",
            "src": "contracts/TutellusTreasuryVault.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusTreasuryVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:9"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:10"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:12"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:13"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:14"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusYFRewardsVault": {
        "src": "contracts/TutellusYFRewardsVault.sol:7",
        "version": {
          "withMetadata": "3b3d48370abaf284ac843bef41bdee2728387126b6f4215d27ab1a3b3b5288f8",
          "withoutMetadata": "291e0bfeb4bbd9ae00e139791e3b7f190b0ce4f6c441de70722e9918c9890877",
          "linkedWithoutMetadata": "291e0bfeb4bbd9ae00e139791e3b7f190b0ce4f6c441de70722e9918c9890877"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256)",
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusYFRewardsVault",
            "src": "contracts/TutellusYFRewardsVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_id",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:9"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_address",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TutellusYFRewardsVault.sol:10"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_allocation",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:11"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_released",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:12"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_distributed",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:13"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:15"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:16"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:17"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:18"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_total",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:19"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusYFRewardsVault.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITutellusERC20": {
        "src": "contracts/interfaces/ITutellusERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlProxyPausable": {
        "src": "contracts/utils/AccessControlProxyPausable.sol:8",
        "inherit": [
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "pause()",
          "unpause()",
          "updateManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlProxyPausable",
              "label": "_manager",
              "type": "t_address",
              "src": "contracts/utils/AccessControlProxyPausable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusERC20": {
        "src": "contracts/utils/TutellusERC20.sol:7",
        "version": {
          "withMetadata": "dc84159cad3b164131d4c82d7fecbd6afdc77136b5d7ce7174903b5f50d601e7",
          "withoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b",
          "linkedWithoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b"
        },
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusERC20",
            "src": "contracts/utils/TutellusERC20.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/TutellusERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "8fbf82a7c4eb8c27572926c5ccb0bf93b2a3334e6edd1b8b2216920e5aa4aa33",
          "withoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa",
          "linkedWithoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "ac56c65fa3040d17a29d946b3b9710d978b16069c314d7eeb4d3fc1412dd3171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProofUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol:14",
        "version": {
          "withMetadata": "73f3b39d72774b4d11f77bbd05464ca592d4fa5e8f8fa04be323f667a192b57d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TutellusDeployer": {
        "src": "contracts/TutellusDeployer.sol:11",
        "version": {
          "withMetadata": "104685fc20a3bde8bc4f3461e4ad97e610fdc79088be8ca29561cbe78fe19545",
          "withoutMetadata": "16154124c5b827ce63239ea312110c2c5fe7d90218c00ad42ff5d56fc13ffcd3",
          "linkedWithoutMetadata": "16154124c5b827ce63239ea312110c2c5fe7d90218c00ad42ff5d56fc13ffcd3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDeployer",
            "src": "contracts/TutellusDeployer.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDeployer",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:13"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rolemanager",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:14"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:15"
            },
            {
              "contract": "TutellusDeployer",
              "label": "holdersVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:16"
            },
            {
              "contract": "TutellusDeployer",
              "label": "farmingVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:17"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rewardsVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:18"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasuryVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusDistributionVault": {
        "src": "contracts/TutellusDistributionVault.sol:7",
        "version": {
          "withMetadata": "78b863334d0e05869aa42b9ab387c5eff7bb2b350124c7904e7045dec5d6891c",
          "withoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131",
          "linkedWithoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allocated(address)",
          "released(address)",
          "distributed(address)",
          "releasePerBlock(address)",
          "endBlock(address)",
          "startBlock(address)",
          "available(address)",
          "distribute(address)",
          "claim()",
          "addStakeholder(address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDistributionVault",
            "src": "contracts/TutellusDistributionVault.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDistributionVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDistributionVault.sol:9"
            },
            {
              "contract": "TutellusDistributionVault",
              "label": "stakeholders",
              "type": "t_mapping(t_address,t_struct(Stakeholder)1878_storage)",
              "src": "contracts/TutellusDistributionVault.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Stakeholder)1878_storage)": {
              "label": "mapping(address => struct TutellusDistributionVault.Stakeholder)"
            },
            "t_struct(Stakeholder)1878_storage": {
              "label": "struct TutellusDistributionVault.Stakeholder",
              "members": [
                {
                  "label": "distributed",
                  "type": "t_uint256"
                },
                {
                  "label": "releasePerBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusMerkleDistributorUpdateable": {
        "src": "contracts/TutellusMerkleDistributorUpdateable.sol:8",
        "version": {
          "withMetadata": "feb4c079188dd57394251a46648ff5ca31df08523a67827df3442f154bbba96e",
          "withoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a",
          "linkedWithoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "MerkleProofUpgradeable"
        ],
        "methods": [
          "updateMerkleRoot(bytes32,string)",
          "alreadyClaimed(address)",
          "leftToClaim(uint256,address,uint256,bytes32[])",
          "claim(uint256,address,uint256,bytes32[])",
          "(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusMerkleDistributorUpdateable",
            "src": "contracts/TutellusMerkleDistributorUpdateable.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:10"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "merkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:11"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "uri",
              "type": "t_string_storage",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:12"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "_alreadyClaimed",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusRoleManager": {
        "src": "contracts/TutellusRoleManager.sol:6",
        "version": {
          "withMetadata": "30b1e9951d705bb937af6f8595172174d31ec9700db3f2a48fbf617fe837f67a",
          "withoutMetadata": "4d412d66cc9cc4db52128944228a567d6f6bb7f807c471797750b599de51bc28",
          "linkedWithoutMetadata": "4d412d66cc9cc4db52128944228a567d6f6bb7f807c471797750b599de51bc28"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "deployer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusRoleManager",
            "src": "contracts/TutellusRoleManager.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusRoleManager",
              "label": "_deployer",
              "type": "t_address",
              "src": "contracts/TutellusRoleManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusTreasuryVault": {
        "src": "contracts/TutellusTreasuryVault.sol:7",
        "version": {
          "withMetadata": "5f3f03a30550e041f2da998f529138df313d10f2de3f438af0ca3dbb1262a896",
          "withoutMetadata": "b59f58ef81fd5d276bfe6c1d137ef768da367d704f5c6a4f44c56a6b344aabf9",
          "linkedWithoutMetadata": "b59f58ef81fd5d276bfe6c1d137ef768da367d704f5c6a4f44c56a6b344aabf9"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "released()",
          "releasedRange(uint256,uint256)",
          "updateTreasury(address)",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusTreasuryVault",
            "src": "contracts/TutellusTreasuryVault.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusTreasuryVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:9"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:10"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:12"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:13"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:14"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusYFRewardsVault": {
        "src": "contracts/TutellusYFRewardsVault.sol:7",
        "version": {
          "withMetadata": "3b3d48370abaf284ac843bef41bdee2728387126b6f4215d27ab1a3b3b5288f8",
          "withoutMetadata": "291e0bfeb4bbd9ae00e139791e3b7f190b0ce4f6c441de70722e9918c9890877",
          "linkedWithoutMetadata": "291e0bfeb4bbd9ae00e139791e3b7f190b0ce4f6c441de70722e9918c9890877"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256)",
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusYFRewardsVault",
            "src": "contracts/TutellusYFRewardsVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_id",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:9"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_address",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TutellusYFRewardsVault.sol:10"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_allocation",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:11"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_released",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:12"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_distributed",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:13"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:15"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:16"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:17"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:18"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_total",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:19"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusYFRewardsVault.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITutellusERC20": {
        "src": "contracts/interfaces/ITutellusERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlProxyPausable": {
        "src": "contracts/utils/AccessControlProxyPausable.sol:8",
        "inherit": [
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "pause()",
          "unpause()",
          "updateManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlProxyPausable",
              "label": "_manager",
              "type": "t_address",
              "src": "contracts/utils/AccessControlProxyPausable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusERC20": {
        "src": "contracts/utils/TutellusERC20.sol:7",
        "version": {
          "withMetadata": "dc84159cad3b164131d4c82d7fecbd6afdc77136b5d7ce7174903b5f50d601e7",
          "withoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b",
          "linkedWithoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b"
        },
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusERC20",
            "src": "contracts/utils/TutellusERC20.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/TutellusERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "8fbf82a7c4eb8c27572926c5ccb0bf93b2a3334e6edd1b8b2216920e5aa4aa33",
          "withoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa",
          "linkedWithoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "ac56c65fa3040d17a29d946b3b9710d978b16069c314d7eeb4d3fc1412dd3171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProofUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol:14",
        "version": {
          "withMetadata": "73f3b39d72774b4d11f77bbd05464ca592d4fa5e8f8fa04be323f667a192b57d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TutellusDeployer": {
        "src": "contracts/TutellusDeployer.sol:11",
        "version": {
          "withMetadata": "aeaa04c554b62a91d509933172308f113665dd6eb11b9ddd6fae84605e228bb5",
          "withoutMetadata": "2da7d72c7d33617b5c9c585efa99396b3c1a6b559bd04fc1b324f15e885b5c4b",
          "linkedWithoutMetadata": "2da7d72c7d33617b5c9c585efa99396b3c1a6b559bd04fc1b324f15e885b5c4b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDeployer",
            "src": "contracts/TutellusDeployer.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDeployer",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:13"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rolemanager",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:14"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:15"
            },
            {
              "contract": "TutellusDeployer",
              "label": "holdersVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:16"
            },
            {
              "contract": "TutellusDeployer",
              "label": "farmingVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:17"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rewardsVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:18"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasuryVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusDistributionVault": {
        "src": "contracts/TutellusDistributionVault.sol:7",
        "version": {
          "withMetadata": "78b863334d0e05869aa42b9ab387c5eff7bb2b350124c7904e7045dec5d6891c",
          "withoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131",
          "linkedWithoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allocated(address)",
          "released(address)",
          "distributed(address)",
          "releasePerBlock(address)",
          "endBlock(address)",
          "startBlock(address)",
          "available(address)",
          "distribute(address)",
          "claim()",
          "addStakeholder(address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDistributionVault",
            "src": "contracts/TutellusDistributionVault.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDistributionVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDistributionVault.sol:9"
            },
            {
              "contract": "TutellusDistributionVault",
              "label": "stakeholders",
              "type": "t_mapping(t_address,t_struct(Stakeholder)1890_storage)",
              "src": "contracts/TutellusDistributionVault.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Stakeholder)1890_storage)": {
              "label": "mapping(address => struct TutellusDistributionVault.Stakeholder)"
            },
            "t_struct(Stakeholder)1890_storage": {
              "label": "struct TutellusDistributionVault.Stakeholder",
              "members": [
                {
                  "label": "distributed",
                  "type": "t_uint256"
                },
                {
                  "label": "releasePerBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusMerkleDistributorUpdateable": {
        "src": "contracts/TutellusMerkleDistributorUpdateable.sol:8",
        "version": {
          "withMetadata": "feb4c079188dd57394251a46648ff5ca31df08523a67827df3442f154bbba96e",
          "withoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a",
          "linkedWithoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "MerkleProofUpgradeable"
        ],
        "methods": [
          "updateMerkleRoot(bytes32,string)",
          "alreadyClaimed(address)",
          "leftToClaim(uint256,address,uint256,bytes32[])",
          "claim(uint256,address,uint256,bytes32[])",
          "(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusMerkleDistributorUpdateable",
            "src": "contracts/TutellusMerkleDistributorUpdateable.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:10"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "merkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:11"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "uri",
              "type": "t_string_storage",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:12"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "_alreadyClaimed",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusRoleManager": {
        "src": "contracts/TutellusRoleManager.sol:6",
        "version": {
          "withMetadata": "30b1e9951d705bb937af6f8595172174d31ec9700db3f2a48fbf617fe837f67a",
          "withoutMetadata": "4d412d66cc9cc4db52128944228a567d6f6bb7f807c471797750b599de51bc28",
          "linkedWithoutMetadata": "4d412d66cc9cc4db52128944228a567d6f6bb7f807c471797750b599de51bc28"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "deployer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusRoleManager",
            "src": "contracts/TutellusRoleManager.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusRoleManager",
              "label": "_deployer",
              "type": "t_address",
              "src": "contracts/TutellusRoleManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusTreasuryVault": {
        "src": "contracts/TutellusTreasuryVault.sol:7",
        "version": {
          "withMetadata": "5f3f03a30550e041f2da998f529138df313d10f2de3f438af0ca3dbb1262a896",
          "withoutMetadata": "b59f58ef81fd5d276bfe6c1d137ef768da367d704f5c6a4f44c56a6b344aabf9",
          "linkedWithoutMetadata": "b59f58ef81fd5d276bfe6c1d137ef768da367d704f5c6a4f44c56a6b344aabf9"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "released()",
          "releasedRange(uint256,uint256)",
          "updateTreasury(address)",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusTreasuryVault",
            "src": "contracts/TutellusTreasuryVault.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusTreasuryVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:9"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:10"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:12"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:13"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:14"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusYFRewardsVault": {
        "src": "contracts/TutellusYFRewardsVault.sol:7",
        "version": {
          "withMetadata": "3b3d48370abaf284ac843bef41bdee2728387126b6f4215d27ab1a3b3b5288f8",
          "withoutMetadata": "291e0bfeb4bbd9ae00e139791e3b7f190b0ce4f6c441de70722e9918c9890877",
          "linkedWithoutMetadata": "291e0bfeb4bbd9ae00e139791e3b7f190b0ce4f6c441de70722e9918c9890877"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256)",
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusYFRewardsVault",
            "src": "contracts/TutellusYFRewardsVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_id",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:9"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_address",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TutellusYFRewardsVault.sol:10"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_allocation",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:11"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_released",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:12"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_distributed",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:13"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:15"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:16"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:17"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:18"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_total",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:19"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusYFRewardsVault.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITutellusERC20": {
        "src": "contracts/interfaces/ITutellusERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlProxyPausable": {
        "src": "contracts/utils/AccessControlProxyPausable.sol:8",
        "inherit": [
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "pause()",
          "unpause()",
          "updateManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlProxyPausable",
              "label": "_manager",
              "type": "t_address",
              "src": "contracts/utils/AccessControlProxyPausable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusERC20": {
        "src": "contracts/utils/TutellusERC20.sol:7",
        "version": {
          "withMetadata": "dc84159cad3b164131d4c82d7fecbd6afdc77136b5d7ce7174903b5f50d601e7",
          "withoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b",
          "linkedWithoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b"
        },
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusERC20",
            "src": "contracts/utils/TutellusERC20.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/TutellusERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "8fbf82a7c4eb8c27572926c5ccb0bf93b2a3334e6edd1b8b2216920e5aa4aa33",
          "withoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa",
          "linkedWithoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "ac56c65fa3040d17a29d946b3b9710d978b16069c314d7eeb4d3fc1412dd3171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProofUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol:14",
        "version": {
          "withMetadata": "73f3b39d72774b4d11f77bbd05464ca592d4fa5e8f8fa04be323f667a192b57d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TutellusDeployer": {
        "src": "contracts/TutellusDeployer.sol:11",
        "version": {
          "withMetadata": "c89800edf83194f6c989516635d72bc2a92340bcf9ebe1e7b5967d55aae00acc",
          "withoutMetadata": "79346ee8e94b3baaf17bbb71a93f4bb2266f367c3250870bfa9b1394fbe16d32",
          "linkedWithoutMetadata": "79346ee8e94b3baaf17bbb71a93f4bb2266f367c3250870bfa9b1394fbe16d32"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDeployer",
            "src": "contracts/TutellusDeployer.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDeployer",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:13"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rolemanager",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:14"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:15"
            },
            {
              "contract": "TutellusDeployer",
              "label": "holdersVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:16"
            },
            {
              "contract": "TutellusDeployer",
              "label": "farmingVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:17"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rewardsVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:18"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasuryVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusDistributionVault": {
        "src": "contracts/TutellusDistributionVault.sol:7",
        "version": {
          "withMetadata": "78b863334d0e05869aa42b9ab387c5eff7bb2b350124c7904e7045dec5d6891c",
          "withoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131",
          "linkedWithoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allocated(address)",
          "released(address)",
          "distributed(address)",
          "releasePerBlock(address)",
          "endBlock(address)",
          "startBlock(address)",
          "available(address)",
          "distribute(address)",
          "claim()",
          "addStakeholder(address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDistributionVault",
            "src": "contracts/TutellusDistributionVault.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDistributionVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDistributionVault.sol:9"
            },
            {
              "contract": "TutellusDistributionVault",
              "label": "stakeholders",
              "type": "t_mapping(t_address,t_struct(Stakeholder)1890_storage)",
              "src": "contracts/TutellusDistributionVault.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Stakeholder)1890_storage)": {
              "label": "mapping(address => struct TutellusDistributionVault.Stakeholder)"
            },
            "t_struct(Stakeholder)1890_storage": {
              "label": "struct TutellusDistributionVault.Stakeholder",
              "members": [
                {
                  "label": "distributed",
                  "type": "t_uint256"
                },
                {
                  "label": "releasePerBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusFarming": {
        "src": "contracts/TutellusFarming.sol:8",
        "version": {
          "withMetadata": "07e47b28b58cbdf29f94b5c346ad2648c90e784acb90f14c784247a7d3f6cdf8",
          "withoutMetadata": "b003aec63d360a798d7cb6a606b170e9541cc377ab6613b7f8801dc1cd4667f2",
          "linkedWithoutMetadata": "b003aec63d360a798d7cb6a606b170e9541cc377ab6613b7f8801dc1cd4667f2"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "depositFrom(address,uint256)",
          "withdraw(uint256)",
          "claim()",
          "toggleAutoreward()",
          "pendingRewards(address)",
          "(address,address,address)",
          "getTokenGap()",
          "syncBalance(address)",
          "getUserBalance(address)",
          "migrate(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusFarming",
            "src": "contracts/TutellusFarming.sol:173"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusFarming",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusFarming.sol:10"
            },
            {
              "contract": "TutellusFarming",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/TutellusFarming.sol:11"
            },
            {
              "contract": "TutellusFarming",
              "label": "autoreward",
              "type": "t_bool",
              "src": "contracts/TutellusFarming.sol:13"
            },
            {
              "contract": "TutellusFarming",
              "label": "balance",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:15"
            },
            {
              "contract": "TutellusFarming",
              "label": "accRewardsPerShare",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:16"
            },
            {
              "contract": "TutellusFarming",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:17"
            },
            {
              "contract": "TutellusFarming",
              "label": "lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:19"
            },
            {
              "contract": "TutellusFarming",
              "label": "stakers",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:20"
            },
            {
              "contract": "TutellusFarming",
              "label": "_userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)2297_storage)",
              "src": "contracts/TutellusFarming.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)2297_storage)": {
              "label": "mapping(address => struct TutellusFarming.UserInfo)"
            },
            "t_struct(UserInfo)2297_storage": {
              "label": "struct TutellusFarming.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "notClaimed",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusMerkleDistributorUpdateable": {
        "src": "contracts/TutellusMerkleDistributorUpdateable.sol:8",
        "version": {
          "withMetadata": "feb4c079188dd57394251a46648ff5ca31df08523a67827df3442f154bbba96e",
          "withoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a",
          "linkedWithoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "MerkleProofUpgradeable"
        ],
        "methods": [
          "updateMerkleRoot(bytes32,string)",
          "alreadyClaimed(address)",
          "leftToClaim(uint256,address,uint256,bytes32[])",
          "claim(uint256,address,uint256,bytes32[])",
          "(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusMerkleDistributorUpdateable",
            "src": "contracts/TutellusMerkleDistributorUpdateable.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:10"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "merkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:11"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "uri",
              "type": "t_string_storage",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:12"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "_alreadyClaimed",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusRoleManager": {
        "src": "contracts/TutellusRoleManager.sol:6",
        "version": {
          "withMetadata": "b573edb1b9229eb632dc6e69f51f82ef28dc033aebcb94612d38975c68783fed",
          "withoutMetadata": "32ce1c71b308e06275576ecbc0eed116e70bca2b2a0c3d14d7fe75eff69a7206",
          "linkedWithoutMetadata": "32ce1c71b308e06275576ecbc0eed116e70bca2b2a0c3d14d7fe75eff69a7206"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusRoleManager",
            "src": "contracts/TutellusRoleManager.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusRoleManager",
              "label": "_deployer",
              "type": "t_address",
              "src": "contracts/TutellusRoleManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusStaking": {
        "src": "contracts/TutellusStaking.sol:8",
        "version": {
          "withMetadata": "ba02646fde3aaa0333e2536949bba3b2618a6cf0b417cf22f810b74749ec51c3",
          "withoutMetadata": "49db716a43095ef7cf4cbef1ec1bf338107493f25dbf39a857343b8bc6aa78a6",
          "linkedWithoutMetadata": "49db716a43095ef7cf4cbef1ec1bf338107493f25dbf39a857343b8bc6aa78a6"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFees(uint256,uint256)",
          "setFeeInterval(uint256)",
          "depositFrom(address,uint256)",
          "withdraw(uint256)",
          "claim()",
          "toggleAutoreward()",
          "getFee(address)",
          "getBlocksLeft(address)",
          "pendingRewards(address)",
          "(address,address,address,uint256,uint256,uint256)",
          "getTokenGap()",
          "syncBalance(address)",
          "getUserBalance(address)",
          "migrate(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusStaking",
            "src": "contracts/TutellusStaking.sol:225"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusStaking",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusStaking.sol:10"
            },
            {
              "contract": "TutellusStaking",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/TutellusStaking.sol:11"
            },
            {
              "contract": "TutellusStaking",
              "label": "autoreward",
              "type": "t_bool",
              "src": "contracts/TutellusStaking.sol:13"
            },
            {
              "contract": "TutellusStaking",
              "label": "balance",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:15"
            },
            {
              "contract": "TutellusStaking",
              "label": "minFee",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:16"
            },
            {
              "contract": "TutellusStaking",
              "label": "maxFee",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:17"
            },
            {
              "contract": "TutellusStaking",
              "label": "accRewardsPerShare",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:18"
            },
            {
              "contract": "TutellusStaking",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:19"
            },
            {
              "contract": "TutellusStaking",
              "label": "lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:21"
            },
            {
              "contract": "TutellusStaking",
              "label": "feeInterval",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:22"
            },
            {
              "contract": "TutellusStaking",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:23"
            },
            {
              "contract": "TutellusStaking",
              "label": "stakers",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:24"
            },
            {
              "contract": "TutellusStaking",
              "label": "_userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3403_storage)",
              "src": "contracts/TutellusStaking.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3403_storage)": {
              "label": "mapping(address => struct TutellusStaking.UserInfo)"
            },
            "t_struct(UserInfo)3403_storage": {
              "label": "struct TutellusStaking.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "notClaimed",
                  "type": "t_uint256"
                },
                {
                  "label": "endInterval",
                  "type": "t_uint256"
                },
                {
                  "label": "minFee",
                  "type": "t_uint256"
                },
                {
                  "label": "maxFee",
                  "type": "t_uint256"
                },
                {
                  "label": "feeInterval",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusTreasuryVault": {
        "src": "contracts/TutellusTreasuryVault.sol:7",
        "version": {
          "withMetadata": "5f3f03a30550e041f2da998f529138df313d10f2de3f438af0ca3dbb1262a896",
          "withoutMetadata": "b59f58ef81fd5d276bfe6c1d137ef768da367d704f5c6a4f44c56a6b344aabf9",
          "linkedWithoutMetadata": "b59f58ef81fd5d276bfe6c1d137ef768da367d704f5c6a4f44c56a6b344aabf9"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "released()",
          "releasedRange(uint256,uint256)",
          "updateTreasury(address)",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusTreasuryVault",
            "src": "contracts/TutellusTreasuryVault.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusTreasuryVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:9"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:10"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:12"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:13"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:14"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusYFRewardsVault": {
        "src": "contracts/TutellusYFRewardsVault.sol:7",
        "version": {
          "withMetadata": "3b3d48370abaf284ac843bef41bdee2728387126b6f4215d27ab1a3b3b5288f8",
          "withoutMetadata": "291e0bfeb4bbd9ae00e139791e3b7f190b0ce4f6c441de70722e9918c9890877",
          "linkedWithoutMetadata": "291e0bfeb4bbd9ae00e139791e3b7f190b0ce4f6c441de70722e9918c9890877"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256)",
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusYFRewardsVault",
            "src": "contracts/TutellusYFRewardsVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_id",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:9"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_address",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TutellusYFRewardsVault.sol:10"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_allocation",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:11"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_released",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:12"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_distributed",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYFRewardsVault.sol:13"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:15"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:16"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:17"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:18"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "_total",
              "type": "t_uint256",
              "src": "contracts/TutellusYFRewardsVault.sol:19"
            },
            {
              "contract": "TutellusYFRewardsVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusYFRewardsVault.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/interfaces/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITutellusERC20": {
        "src": "contracts/interfaces/ITutellusERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITutellusYFRewardsVault": {
        "src": "contracts/interfaces/ITutellusYFRewardsVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)",
          "initialize(address,address,uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlProxyPausable": {
        "src": "contracts/utils/AccessControlProxyPausable.sol:8",
        "inherit": [
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "pause()",
          "unpause()",
          "updateManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlProxyPausable",
              "label": "_manager",
              "type": "t_address",
              "src": "contracts/utils/AccessControlProxyPausable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusERC20": {
        "src": "contracts/utils/TutellusERC20.sol:7",
        "version": {
          "withMetadata": "dc84159cad3b164131d4c82d7fecbd6afdc77136b5d7ce7174903b5f50d601e7",
          "withoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b",
          "linkedWithoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b"
        },
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusERC20",
            "src": "contracts/utils/TutellusERC20.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/TutellusERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "8fbf82a7c4eb8c27572926c5ccb0bf93b2a3334e6edd1b8b2216920e5aa4aa33",
          "withoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa",
          "linkedWithoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "ac56c65fa3040d17a29d946b3b9710d978b16069c314d7eeb4d3fc1412dd3171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProofUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol:14",
        "version": {
          "withMetadata": "73f3b39d72774b4d11f77bbd05464ca592d4fa5e8f8fa04be323f667a192b57d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TutellusDeployer": {
        "src": "contracts/TutellusDeployer.sol:11",
        "version": {
          "withMetadata": "84710f138b2647963cf362f9a9079cc5a2580fe43adca77de7c32c69b540ed2d",
          "withoutMetadata": "1c6669ef53ddec3ba940cdd86a1005161213dd770e99c998bad147949eaf98b9",
          "linkedWithoutMetadata": "1c6669ef53ddec3ba940cdd86a1005161213dd770e99c998bad147949eaf98b9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDeployer",
            "src": "contracts/TutellusDeployer.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDeployer",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:13"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rolemanager",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:14"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:15"
            },
            {
              "contract": "TutellusDeployer",
              "label": "holdersVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:16"
            },
            {
              "contract": "TutellusDeployer",
              "label": "farmingVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:17"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rewardsVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:18"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasuryVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusDistributionVault": {
        "src": "contracts/TutellusDistributionVault.sol:7",
        "version": {
          "withMetadata": "78b863334d0e05869aa42b9ab387c5eff7bb2b350124c7904e7045dec5d6891c",
          "withoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131",
          "linkedWithoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allocated(address)",
          "released(address)",
          "distributed(address)",
          "releasePerBlock(address)",
          "endBlock(address)",
          "startBlock(address)",
          "available(address)",
          "distribute(address)",
          "claim()",
          "addStakeholder(address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDistributionVault",
            "src": "contracts/TutellusDistributionVault.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDistributionVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDistributionVault.sol:9"
            },
            {
              "contract": "TutellusDistributionVault",
              "label": "stakeholders",
              "type": "t_mapping(t_address,t_struct(Stakeholder)1902_storage)",
              "src": "contracts/TutellusDistributionVault.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Stakeholder)1902_storage)": {
              "label": "mapping(address => struct TutellusDistributionVault.Stakeholder)"
            },
            "t_struct(Stakeholder)1902_storage": {
              "label": "struct TutellusDistributionVault.Stakeholder",
              "members": [
                {
                  "label": "distributed",
                  "type": "t_uint256"
                },
                {
                  "label": "releasePerBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusMerkleDistributorUpdateable": {
        "src": "contracts/TutellusMerkleDistributorUpdateable.sol:8",
        "version": {
          "withMetadata": "feb4c079188dd57394251a46648ff5ca31df08523a67827df3442f154bbba96e",
          "withoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a",
          "linkedWithoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "MerkleProofUpgradeable"
        ],
        "methods": [
          "updateMerkleRoot(bytes32,string)",
          "alreadyClaimed(address)",
          "leftToClaim(uint256,address,uint256,bytes32[])",
          "claim(uint256,address,uint256,bytes32[])",
          "(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusMerkleDistributorUpdateable",
            "src": "contracts/TutellusMerkleDistributorUpdateable.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:10"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "merkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:11"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "uri",
              "type": "t_string_storage",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:12"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "_alreadyClaimed",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusRoleManager": {
        "src": "contracts/TutellusRoleManager.sol:6",
        "version": {
          "withMetadata": "b573edb1b9229eb632dc6e69f51f82ef28dc033aebcb94612d38975c68783fed",
          "withoutMetadata": "32ce1c71b308e06275576ecbc0eed116e70bca2b2a0c3d14d7fe75eff69a7206",
          "linkedWithoutMetadata": "32ce1c71b308e06275576ecbc0eed116e70bca2b2a0c3d14d7fe75eff69a7206"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusRoleManager",
            "src": "contracts/TutellusRoleManager.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusRoleManager",
              "label": "_deployer",
              "type": "t_address",
              "src": "contracts/TutellusRoleManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusTreasuryVault": {
        "src": "contracts/TutellusTreasuryVault.sol:7",
        "version": {
          "withMetadata": "5f3f03a30550e041f2da998f529138df313d10f2de3f438af0ca3dbb1262a896",
          "withoutMetadata": "b59f58ef81fd5d276bfe6c1d137ef768da367d704f5c6a4f44c56a6b344aabf9",
          "linkedWithoutMetadata": "b59f58ef81fd5d276bfe6c1d137ef768da367d704f5c6a4f44c56a6b344aabf9"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "released()",
          "releasedRange(uint256,uint256)",
          "updateTreasury(address)",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusTreasuryVault",
            "src": "contracts/TutellusTreasuryVault.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusTreasuryVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:9"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:10"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:12"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:13"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:14"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusYieldRewardsVault": {
        "src": "contracts/TutellusYieldRewardsVault.sol:7",
        "version": {
          "withMetadata": "b056d02259c5846a5ebe4ed1d22bae41457b785419b41418be8aeb57995f0595",
          "withoutMetadata": "9488bde98679a1a54859ad67f8fa798a3a6d9770295856615589a692729c23eb",
          "linkedWithoutMetadata": "9488bde98679a1a54859ad67f8fa798a3a6d9770295856615589a692729c23eb"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256)",
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusYieldRewardsVault",
            "src": "contracts/TutellusYieldRewardsVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_id",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:9"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_address",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TutellusYieldRewardsVault.sol:10"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_allocation",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:11"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_released",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:12"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_distributed",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:13"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:15"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:16"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:17"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:18"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_total",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:19"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusYieldRewardsVault.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITutellusERC20": {
        "src": "contracts/interfaces/ITutellusERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlProxyPausable": {
        "src": "contracts/utils/AccessControlProxyPausable.sol:8",
        "inherit": [
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "pause()",
          "unpause()",
          "updateManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlProxyPausable",
              "label": "_manager",
              "type": "t_address",
              "src": "contracts/utils/AccessControlProxyPausable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusERC20": {
        "src": "contracts/utils/TutellusERC20.sol:7",
        "version": {
          "withMetadata": "dc84159cad3b164131d4c82d7fecbd6afdc77136b5d7ce7174903b5f50d601e7",
          "withoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b",
          "linkedWithoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b"
        },
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusERC20",
            "src": "contracts/utils/TutellusERC20.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/TutellusERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "8fbf82a7c4eb8c27572926c5ccb0bf93b2a3334e6edd1b8b2216920e5aa4aa33",
          "withoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa",
          "linkedWithoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "ac56c65fa3040d17a29d946b3b9710d978b16069c314d7eeb4d3fc1412dd3171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProofUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol:14",
        "version": {
          "withMetadata": "73f3b39d72774b4d11f77bbd05464ca592d4fa5e8f8fa04be323f667a192b57d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TutellusDeployer": {
        "src": "contracts/TutellusDeployer.sol:11",
        "version": {
          "withMetadata": "5c55a4027bd02d64c529815703c9d9370235e2ff6f902ad8b5cecd020dda711e",
          "withoutMetadata": "0d7081de98bff7999947ecfb8190e4624634cd5752046029b786b09252602ed6",
          "linkedWithoutMetadata": "0d7081de98bff7999947ecfb8190e4624634cd5752046029b786b09252602ed6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDeployer",
            "src": "contracts/TutellusDeployer.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDeployer",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:13"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rolemanager",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:14"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:15"
            },
            {
              "contract": "TutellusDeployer",
              "label": "holdersVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:16"
            },
            {
              "contract": "TutellusDeployer",
              "label": "farmingVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:17"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rewardsVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:18"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasuryVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusDistributionVault": {
        "src": "contracts/TutellusDistributionVault.sol:7",
        "version": {
          "withMetadata": "78b863334d0e05869aa42b9ab387c5eff7bb2b350124c7904e7045dec5d6891c",
          "withoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131",
          "linkedWithoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allocated(address)",
          "released(address)",
          "distributed(address)",
          "releasePerBlock(address)",
          "endBlock(address)",
          "startBlock(address)",
          "available(address)",
          "distribute(address)",
          "claim()",
          "addStakeholder(address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDistributionVault",
            "src": "contracts/TutellusDistributionVault.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDistributionVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDistributionVault.sol:9"
            },
            {
              "contract": "TutellusDistributionVault",
              "label": "stakeholders",
              "type": "t_mapping(t_address,t_struct(Stakeholder)1902_storage)",
              "src": "contracts/TutellusDistributionVault.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Stakeholder)1902_storage)": {
              "label": "mapping(address => struct TutellusDistributionVault.Stakeholder)"
            },
            "t_struct(Stakeholder)1902_storage": {
              "label": "struct TutellusDistributionVault.Stakeholder",
              "members": [
                {
                  "label": "distributed",
                  "type": "t_uint256"
                },
                {
                  "label": "releasePerBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusMerkleDistributorUpdateable": {
        "src": "contracts/TutellusMerkleDistributorUpdateable.sol:8",
        "version": {
          "withMetadata": "feb4c079188dd57394251a46648ff5ca31df08523a67827df3442f154bbba96e",
          "withoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a",
          "linkedWithoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "MerkleProofUpgradeable"
        ],
        "methods": [
          "updateMerkleRoot(bytes32,string)",
          "alreadyClaimed(address)",
          "leftToClaim(uint256,address,uint256,bytes32[])",
          "claim(uint256,address,uint256,bytes32[])",
          "(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusMerkleDistributorUpdateable",
            "src": "contracts/TutellusMerkleDistributorUpdateable.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:10"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "merkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:11"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "uri",
              "type": "t_string_storage",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:12"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "_alreadyClaimed",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusRoleManager": {
        "src": "contracts/TutellusRoleManager.sol:6",
        "version": {
          "withMetadata": "b573edb1b9229eb632dc6e69f51f82ef28dc033aebcb94612d38975c68783fed",
          "withoutMetadata": "32ce1c71b308e06275576ecbc0eed116e70bca2b2a0c3d14d7fe75eff69a7206",
          "linkedWithoutMetadata": "32ce1c71b308e06275576ecbc0eed116e70bca2b2a0c3d14d7fe75eff69a7206"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusRoleManager",
            "src": "contracts/TutellusRoleManager.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusRoleManager",
              "label": "_deployer",
              "type": "t_address",
              "src": "contracts/TutellusRoleManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusTreasuryVault": {
        "src": "contracts/TutellusTreasuryVault.sol:7",
        "version": {
          "withMetadata": "0bb017e93aabc9c6749cd53b4e05959237142347be95b6f366280993902e8e14",
          "withoutMetadata": "002cb4234c3d42830b29bb5705744d45c5ae22156963d9fcf6535ab3a553ce41",
          "linkedWithoutMetadata": "002cb4234c3d42830b29bb5705744d45c5ae22156963d9fcf6535ab3a553ce41"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "released()",
          "releasedRange(uint256,uint256)",
          "updateTreasury(address)",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusTreasuryVault",
            "src": "contracts/TutellusTreasuryVault.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusTreasuryVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:9"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:10"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:12"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:13"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:14"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusYieldRewardsVault": {
        "src": "contracts/TutellusYieldRewardsVault.sol:7",
        "version": {
          "withMetadata": "b056d02259c5846a5ebe4ed1d22bae41457b785419b41418be8aeb57995f0595",
          "withoutMetadata": "9488bde98679a1a54859ad67f8fa798a3a6d9770295856615589a692729c23eb",
          "linkedWithoutMetadata": "9488bde98679a1a54859ad67f8fa798a3a6d9770295856615589a692729c23eb"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256)",
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusYieldRewardsVault",
            "src": "contracts/TutellusYieldRewardsVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_id",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:9"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_address",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TutellusYieldRewardsVault.sol:10"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_allocation",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:11"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_released",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:12"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_distributed",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:13"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:15"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:16"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:17"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:18"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_total",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:19"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusYieldRewardsVault.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ITutellusERC20": {
        "src": "contracts/interfaces/ITutellusERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlProxyPausable": {
        "src": "contracts/utils/AccessControlProxyPausable.sol:8",
        "inherit": [
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "pause()",
          "unpause()",
          "updateManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlProxyPausable",
              "label": "_manager",
              "type": "t_address",
              "src": "contracts/utils/AccessControlProxyPausable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusERC20": {
        "src": "contracts/utils/TutellusERC20.sol:7",
        "version": {
          "withMetadata": "dc84159cad3b164131d4c82d7fecbd6afdc77136b5d7ce7174903b5f50d601e7",
          "withoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b",
          "linkedWithoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b"
        },
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusERC20",
            "src": "contracts/utils/TutellusERC20.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/TutellusERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)89_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)89_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)89_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "8fbf82a7c4eb8c27572926c5ccb0bf93b2a3334e6edd1b8b2216920e5aa4aa33",
          "withoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa",
          "linkedWithoutMetadata": "7d2a9f99159bb217470d71370e0b19d758f70d2d11ba803dd01d1c18860379aa"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "ac56c65fa3040d17a29d946b3b9710d978b16069c314d7eeb4d3fc1412dd3171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProofUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol:14",
        "version": {
          "withMetadata": "73f3b39d72774b4d11f77bbd05464ca592d4fa5e8f8fa04be323f667a192b57d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TutellusDeployer": {
        "src": "contracts/TutellusDeployer.sol:11",
        "version": {
          "withMetadata": "ae6298e885720a7e1772d17e257c7ddd563e4d1fa66d8b9ae98e7d20b9056432",
          "withoutMetadata": "e544bc22edae5744034c35f8c63cdc9078555e95e82f418a7ae40f9d579bc92a",
          "linkedWithoutMetadata": "e544bc22edae5744034c35f8c63cdc9078555e95e82f418a7ae40f9d579bc92a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDeployer",
            "src": "contracts/TutellusDeployer.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDeployer",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:13"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rolemanager",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:14"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:15"
            },
            {
              "contract": "TutellusDeployer",
              "label": "holdersVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:16"
            },
            {
              "contract": "TutellusDeployer",
              "label": "farmingVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:17"
            },
            {
              "contract": "TutellusDeployer",
              "label": "rewardsVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:18"
            },
            {
              "contract": "TutellusDeployer",
              "label": "treasuryVault",
              "type": "t_address",
              "src": "contracts/TutellusDeployer.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusDistributionVault": {
        "src": "contracts/TutellusDistributionVault.sol:7",
        "version": {
          "withMetadata": "78b863334d0e05869aa42b9ab387c5eff7bb2b350124c7904e7045dec5d6891c",
          "withoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131",
          "linkedWithoutMetadata": "15f556d6b1f6a75f0ead8ff2f6b7243bc0ab943735c4b20e5c856b2f9141d131"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "allocated(address)",
          "released(address)",
          "distributed(address)",
          "releasePerBlock(address)",
          "endBlock(address)",
          "startBlock(address)",
          "available(address)",
          "distribute(address)",
          "claim()",
          "addStakeholder(address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusDistributionVault",
            "src": "contracts/TutellusDistributionVault.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusDistributionVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusDistributionVault.sol:9"
            },
            {
              "contract": "TutellusDistributionVault",
              "label": "stakeholders",
              "type": "t_mapping(t_address,t_struct(Stakeholder)1948_storage)",
              "src": "contracts/TutellusDistributionVault.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Stakeholder)1948_storage)": {
              "label": "mapping(address => struct TutellusDistributionVault.Stakeholder)"
            },
            "t_struct(Stakeholder)1948_storage": {
              "label": "struct TutellusDistributionVault.Stakeholder",
              "members": [
                {
                  "label": "distributed",
                  "type": "t_uint256"
                },
                {
                  "label": "releasePerBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusFarming": {
        "src": "contracts/TutellusFarming.sol:8",
        "version": {
          "withMetadata": "8a66ebbe2195d53ae927c819945a2346f6469cb064138ecd9611f840691a60f4",
          "withoutMetadata": "b003aec63d360a798d7cb6a606b170e9541cc377ab6613b7f8801dc1cd4667f2",
          "linkedWithoutMetadata": "b003aec63d360a798d7cb6a606b170e9541cc377ab6613b7f8801dc1cd4667f2"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "depositFrom(address,uint256)",
          "withdraw(uint256)",
          "claim()",
          "toggleAutoreward()",
          "pendingRewards(address)",
          "(address,address,address)",
          "getTokenGap()",
          "syncBalance(address)",
          "getUserBalance(address)",
          "migrate(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusFarming",
            "src": "contracts/TutellusFarming.sol:173"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusFarming",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusFarming.sol:10"
            },
            {
              "contract": "TutellusFarming",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/TutellusFarming.sol:11"
            },
            {
              "contract": "TutellusFarming",
              "label": "autoreward",
              "type": "t_bool",
              "src": "contracts/TutellusFarming.sol:13"
            },
            {
              "contract": "TutellusFarming",
              "label": "balance",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:15"
            },
            {
              "contract": "TutellusFarming",
              "label": "accRewardsPerShare",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:16"
            },
            {
              "contract": "TutellusFarming",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:17"
            },
            {
              "contract": "TutellusFarming",
              "label": "lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:19"
            },
            {
              "contract": "TutellusFarming",
              "label": "stakers",
              "type": "t_uint256",
              "src": "contracts/TutellusFarming.sol:20"
            },
            {
              "contract": "TutellusFarming",
              "label": "_userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)2355_storage)",
              "src": "contracts/TutellusFarming.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)2355_storage)": {
              "label": "mapping(address => struct TutellusFarming.UserInfo)"
            },
            "t_struct(UserInfo)2355_storage": {
              "label": "struct TutellusFarming.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "notClaimed",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusMerkleDistributorUpdateable": {
        "src": "contracts/TutellusMerkleDistributorUpdateable.sol:8",
        "version": {
          "withMetadata": "feb4c079188dd57394251a46648ff5ca31df08523a67827df3442f154bbba96e",
          "withoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a",
          "linkedWithoutMetadata": "986c06d87bb8da679bca8d76e8d97c776b7591bc52c00e83f40ee2a5b53fc06a"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "MerkleProofUpgradeable"
        ],
        "methods": [
          "updateMerkleRoot(bytes32,string)",
          "alreadyClaimed(address)",
          "leftToClaim(uint256,address,uint256,bytes32[])",
          "claim(uint256,address,uint256,bytes32[])",
          "(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusMerkleDistributorUpdateable",
            "src": "contracts/TutellusMerkleDistributorUpdateable.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:10"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "merkleRoot",
              "type": "t_bytes32",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:11"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "uri",
              "type": "t_string_storage",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:12"
            },
            {
              "contract": "TutellusMerkleDistributorUpdateable",
              "label": "_alreadyClaimed",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusMerkleDistributorUpdateable.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusRoleManager": {
        "src": "contracts/TutellusRoleManager.sol:6",
        "version": {
          "withMetadata": "b573edb1b9229eb632dc6e69f51f82ef28dc033aebcb94612d38975c68783fed",
          "withoutMetadata": "32ce1c71b308e06275576ecbc0eed116e70bca2b2a0c3d14d7fe75eff69a7206",
          "linkedWithoutMetadata": "32ce1c71b308e06275576ecbc0eed116e70bca2b2a0c3d14d7fe75eff69a7206"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusRoleManager",
            "src": "contracts/TutellusRoleManager.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusRoleManager",
              "label": "_deployer",
              "type": "t_address",
              "src": "contracts/TutellusRoleManager.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusStaking": {
        "src": "contracts/TutellusStaking.sol:8",
        "version": {
          "withMetadata": "4c814825f670cda39be55effce29c73e383f53c04767f7a0fee586f907eb5f2a",
          "withoutMetadata": "49db716a43095ef7cf4cbef1ec1bf338107493f25dbf39a857343b8bc6aa78a6",
          "linkedWithoutMetadata": "49db716a43095ef7cf4cbef1ec1bf338107493f25dbf39a857343b8bc6aa78a6"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "setFees(uint256,uint256)",
          "setFeeInterval(uint256)",
          "depositFrom(address,uint256)",
          "withdraw(uint256)",
          "claim()",
          "toggleAutoreward()",
          "getFee(address)",
          "getBlocksLeft(address)",
          "pendingRewards(address)",
          "(address,address,address,uint256,uint256,uint256)",
          "getTokenGap()",
          "syncBalance(address)",
          "getUserBalance(address)",
          "migrate(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusStaking",
            "src": "contracts/TutellusStaking.sol:225"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusStaking",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusStaking.sol:10"
            },
            {
              "contract": "TutellusStaking",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/TutellusStaking.sol:11"
            },
            {
              "contract": "TutellusStaking",
              "label": "autoreward",
              "type": "t_bool",
              "src": "contracts/TutellusStaking.sol:13"
            },
            {
              "contract": "TutellusStaking",
              "label": "balance",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:15"
            },
            {
              "contract": "TutellusStaking",
              "label": "minFee",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:16"
            },
            {
              "contract": "TutellusStaking",
              "label": "maxFee",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:17"
            },
            {
              "contract": "TutellusStaking",
              "label": "accRewardsPerShare",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:18"
            },
            {
              "contract": "TutellusStaking",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:19"
            },
            {
              "contract": "TutellusStaking",
              "label": "lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:21"
            },
            {
              "contract": "TutellusStaking",
              "label": "feeInterval",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:22"
            },
            {
              "contract": "TutellusStaking",
              "label": "endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:23"
            },
            {
              "contract": "TutellusStaking",
              "label": "stakers",
              "type": "t_uint256",
              "src": "contracts/TutellusStaking.sol:24"
            },
            {
              "contract": "TutellusStaking",
              "label": "_userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3461_storage)",
              "src": "contracts/TutellusStaking.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3461_storage)": {
              "label": "mapping(address => struct TutellusStaking.UserInfo)"
            },
            "t_struct(UserInfo)3461_storage": {
              "label": "struct TutellusStaking.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                },
                {
                  "label": "notClaimed",
                  "type": "t_uint256"
                },
                {
                  "label": "endInterval",
                  "type": "t_uint256"
                },
                {
                  "label": "minFee",
                  "type": "t_uint256"
                },
                {
                  "label": "maxFee",
                  "type": "t_uint256"
                },
                {
                  "label": "feeInterval",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusTreasuryVault": {
        "src": "contracts/TutellusTreasuryVault.sol:7",
        "version": {
          "withMetadata": "0bb017e93aabc9c6749cd53b4e05959237142347be95b6f366280993902e8e14",
          "withoutMetadata": "002cb4234c3d42830b29bb5705744d45c5ae22156963d9fcf6535ab3a553ce41",
          "linkedWithoutMetadata": "002cb4234c3d42830b29bb5705744d45c5ae22156963d9fcf6535ab3a553ce41"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "released()",
          "releasedRange(uint256,uint256)",
          "updateTreasury(address)",
          "claim()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusTreasuryVault",
            "src": "contracts/TutellusTreasuryVault.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusTreasuryVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:9"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "treasury",
              "type": "t_address",
              "src": "contracts/TutellusTreasuryVault.sol:10"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_released",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:12"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:13"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:14"
            },
            {
              "contract": "TutellusTreasuryVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusTreasuryVault.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusYieldRewardsVault": {
        "src": "contracts/TutellusYieldRewardsVault.sol:7",
        "version": {
          "withMetadata": "e277ce73514f423b64b86426d5385716c66a858c2e6b2b74278e66e3de6bfa08",
          "withoutMetadata": "92ac93802a49276ccf3fe4ced75243b4a04aea3dcfc78ae049fe19405a36b035",
          "linkedWithoutMetadata": "92ac93802a49276ccf3fe4ced75243b4a04aea3dcfc78ae049fe19405a36b035"
        },
        "inherit": [
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256)",
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusYieldRewardsVault",
            "src": "contracts/TutellusYieldRewardsVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_id",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:9"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_address",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/TutellusYieldRewardsVault.sol:10"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_allocation",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:11"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_released",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:12"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_distributed",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/TutellusYieldRewardsVault.sol:13"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_lastUpdate",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:15"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_startBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:16"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_endBlock",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:17"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_increment",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:18"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "_total",
              "type": "t_uint256",
              "src": "contracts/TutellusYieldRewardsVault.sol:19"
            },
            {
              "contract": "TutellusYieldRewardsVault",
              "label": "token",
              "type": "t_address",
              "src": "contracts/TutellusYieldRewardsVault.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDistributionVault": {
        "src": "contracts/interfaces/IDistributionVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "token()",
          "distributeTokens(address,uint256)",
          "claim()",
          "allocated(address)",
          "released(address)",
          "distributed(address)",
          "releasePerBlock(address)",
          "startBlock(address)",
          "endBlock(address)",
          "lastUpdate(address)",
          "available(address)",
          "isStakeholder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/interfaces/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/interfaces/IPancakeFactory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITutellusERC20": {
        "src": "contracts/interfaces/ITutellusERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ITutellusYieldRewardsVault": {
        "src": "contracts/interfaces/ITutellusYieldRewardsVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "add(address,uint256[])",
          "updateAllocation(uint256[])",
          "released()",
          "availableId(address)",
          "releasedRange(uint256,uint256)",
          "releasedId(address)",
          "distributeTokens(address,uint256)",
          "initialize(address,address,uint256[],uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorMock": {
        "src": "contracts/mock/AggregatorMock.sol:7",
        "version": {
          "withMetadata": "9d200bbb289babef98c3fb687d7d3aa934a85d1d522aac635a48e5670b5e1e4d",
          "withoutMetadata": "f85191f576e77854503d36d88468b3996ca3c73345ed33ee2a8406e378e65046",
          "linkedWithoutMetadata": "f85191f576e77854503d36d88468b3996ca3c73345ed33ee2a8406e378e65046"
        },
        "inherit": [
          "Initializable",
          "AggregatorV3Interface"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint8,int256)",
          "decimals()",
          "description()",
          "version()",
          "latestRoundData()",
          "getRoundData(uint80)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_round",
            "src": "contracts/mock/AggregatorMock.sol:8"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_time",
            "src": "contracts/mock/AggregatorMock.sol:9"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_description",
            "src": "contracts/mock/AggregatorMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AggregatorMock",
              "label": "_round",
              "type": "t_uint80",
              "src": "contracts/mock/AggregatorMock.sol:8"
            },
            {
              "contract": "AggregatorMock",
              "label": "_time",
              "type": "t_uint256",
              "src": "contracts/mock/AggregatorMock.sol:9"
            },
            {
              "contract": "AggregatorMock",
              "label": "_description",
              "type": "t_string_storage",
              "src": "contracts/mock/AggregatorMock.sol:10"
            },
            {
              "contract": "AggregatorMock",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/mock/AggregatorMock.sol:11"
            },
            {
              "contract": "AggregatorMock",
              "label": "_answer",
              "type": "t_int256",
              "src": "contracts/mock/AggregatorMock.sol:12"
            }
          ],
          "types": {
            "t_uint80": {
              "label": "uint80"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_int256": {
              "label": "int256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeFactoryMock": {
        "src": "contracts/mock/PancakeRouterMock.sol:36",
        "version": {
          "withMetadata": "935a3ae5d4665fbe1a220034696176d34e045592e76c12913750bbf594e32569",
          "withoutMetadata": "8c11977456027ed50b824af2c87792cf28b60ff9f9469371f8f8dd4e3f6c715b",
          "linkedWithoutMetadata": "8c11977456027ed50b824af2c87792cf28b60ff9f9469371f8f8dd4e3f6c715b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PancakeFactoryMock",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/mock/PancakeRouterMock.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakePairMock": {
        "src": "contracts/mock/PancakeRouterMock.sol:53",
        "version": {
          "withMetadata": "9e41fe0979b4511f3ccb50b98f6e7667ea70b774e4be63459d6861136da1e08d",
          "withoutMetadata": "b59e0a7b68b1eb01f6405fb9bec8654c1c152eced1e01da0fbd787586e8830a2",
          "linkedWithoutMetadata": "b59e0a7b68b1eb01f6405fb9bec8654c1c152eced1e01da0fbd787586e8830a2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "reservesA()",
          "reservesB()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakePairMock",
            "src": "contracts/mock/PancakeRouterMock.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakePairMock",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts/mock/PancakeRouterMock.sol:54"
            },
            {
              "contract": "PancakePairMock",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts/mock/PancakeRouterMock.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouterMock": {
        "src": "contracts/mock/PancakeRouterMock.sol:7",
        "version": {
          "withMetadata": "9eb9c16a9e0d3d24a03c2a4412be152bd4661d108c26106ed6600bb328d6f972",
          "withoutMetadata": "5bb320f4b016b05ca3ac1e96e6a09cc317a39944185199b82b466682c19d5410",
          "linkedWithoutMetadata": "5bb320f4b016b05ca3ac1e96e6a09cc317a39944185199b82b466682c19d5410"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "createPair(address,address)",
          "addLiquidity(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouterMock",
            "src": "contracts/mock/PancakeRouterMock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeRouterMock",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/mock/PancakeRouterMock.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlProxyPausable": {
        "src": "contracts/utils/AccessControlProxyPausable.sol:8",
        "inherit": [
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "pause()",
          "unpause()",
          "updateManager(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlProxyPausable",
              "label": "_manager",
              "type": "t_address",
              "src": "contracts/utils/AccessControlProxyPausable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TutellusERC20": {
        "src": "contracts/utils/TutellusERC20.sol:7",
        "version": {
          "withMetadata": "dc84159cad3b164131d4c82d7fecbd6afdc77136b5d7ce7174903b5f50d601e7",
          "withoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b",
          "linkedWithoutMetadata": "46fc2cf2fe0daeb5e9563d4d0c0f723987306b1aca841b957c0bee5f4739de2b"
        },
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlProxyPausable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TutellusERC20",
            "src": "contracts/utils/TutellusERC20.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TutellusERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/TutellusERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "b48b5c9e56c88e74f94871c53d39e259770834f47defd6b08d78c2559a79b930",
          "withoutMetadata": "e7b79f0ff58eafe422b3e4c8b50fdb34636ce7bc0b9a9e015191455d750709fc",
          "linkedWithoutMetadata": "e7b79f0ff58eafe422b3e4c8b50fdb34636ce7bc0b9a9e015191455d750709fc"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "571885c656798930af54166c8c4712b17f6ababbc77f90719256b2ca68684860",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlPausableUpgradeable": {
        "src": "contracts/utils/AccessControlPausableUpgradeable.sol:7",
        "inherit": [
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "grantPauserRole(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "PAUSER_ROLE",
            "src": "contracts/utils/AccessControlPausableUpgradeable.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlPausableUpgradeable",
              "label": "PAUSER_ROLE",
              "type": "t_bytes32",
              "src": "contracts/utils/AccessControlPausableUpgradeable.sol:9"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RedPillERC20": {
        "src": "contracts/utils/RedPillERC20.sol:7",
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlPausableUpgradeable",
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "RedPillERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/RedPillERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/utils/Token.sol:6",
        "version": {
          "withMetadata": "a2a0f3d75a79b447b238a15d83170b0a8c92f300514610f04d2d49c85c528c1c",
          "withoutMetadata": "220024b2d6a01aefadf2d1198c88c14432098c7dd7b221bc20f7a224b3cae416",
          "linkedWithoutMetadata": "220024b2d6a01aefadf2d1198c88c14432098c7dd7b221bc20f7a224b3cae416"
        },
        "inherit": [
          "RedPillERC20",
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlPausableUpgradeable",
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/utils/Token.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "b48b5c9e56c88e74f94871c53d39e259770834f47defd6b08d78c2559a79b930",
          "withoutMetadata": "e7b79f0ff58eafe422b3e4c8b50fdb34636ce7bc0b9a9e015191455d750709fc",
          "linkedWithoutMetadata": "e7b79f0ff58eafe422b3e4c8b50fdb34636ce7bc0b9a9e015191455d750709fc"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "571885c656798930af54166c8c4712b17f6ababbc77f90719256b2ca68684860",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlPausableUpgradeable": {
        "src": "contracts/utils/AccessControlPausableUpgradeable.sol:7",
        "inherit": [
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "grantPauserRole(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "PAUSER_ROLE",
            "src": "contracts/utils/AccessControlPausableUpgradeable.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlPausableUpgradeable",
              "label": "PAUSER_ROLE",
              "type": "t_bytes32",
              "src": "contracts/utils/AccessControlPausableUpgradeable.sol:9"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RedPillERC20": {
        "src": "contracts/utils/RedPillERC20.sol:7",
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlPausableUpgradeable",
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "RedPillERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/RedPillERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/utils/Token.sol:6",
        "version": {
          "withMetadata": "a2a0f3d75a79b447b238a15d83170b0a8c92f300514610f04d2d49c85c528c1c",
          "withoutMetadata": "220024b2d6a01aefadf2d1198c88c14432098c7dd7b221bc20f7a224b3cae416",
          "linkedWithoutMetadata": "220024b2d6a01aefadf2d1198c88c14432098c7dd7b221bc20f7a224b3cae416"
        },
        "inherit": [
          "RedPillERC20",
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlPausableUpgradeable",
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/utils/Token.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "b48b5c9e56c88e74f94871c53d39e259770834f47defd6b08d78c2559a79b930",
          "withoutMetadata": "e7b79f0ff58eafe422b3e4c8b50fdb34636ce7bc0b9a9e015191455d750709fc",
          "linkedWithoutMetadata": "e7b79f0ff58eafe422b3e4c8b50fdb34636ce7bc0b9a9e015191455d750709fc"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "571885c656798930af54166c8c4712b17f6ababbc77f90719256b2ca68684860",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlPausableUpgradeable": {
        "src": "contracts/utils/AccessControlPausableUpgradeable.sol:7",
        "inherit": [
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "grantPauserRole(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "PAUSER_ROLE",
            "src": "contracts/utils/AccessControlPausableUpgradeable.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlPausableUpgradeable",
              "label": "PAUSER_ROLE",
              "type": "t_bytes32",
              "src": "contracts/utils/AccessControlPausableUpgradeable.sol:9"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RedPillERC20": {
        "src": "contracts/utils/RedPillERC20.sol:7",
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlPausableUpgradeable",
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "RedPillERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/RedPillERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/utils/Token.sol:6",
        "version": {
          "withMetadata": "a2a0f3d75a79b447b238a15d83170b0a8c92f300514610f04d2d49c85c528c1c",
          "withoutMetadata": "220024b2d6a01aefadf2d1198c88c14432098c7dd7b221bc20f7a224b3cae416",
          "linkedWithoutMetadata": "220024b2d6a01aefadf2d1198c88c14432098c7dd7b221bc20f7a224b3cae416"
        },
        "inherit": [
          "RedPillERC20",
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlPausableUpgradeable",
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/utils/Token.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)89_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)89_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)89_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "b48b5c9e56c88e74f94871c53d39e259770834f47defd6b08d78c2559a79b930",
          "withoutMetadata": "e7b79f0ff58eafe422b3e4c8b50fdb34636ce7bc0b9a9e015191455d750709fc",
          "linkedWithoutMetadata": "e7b79f0ff58eafe422b3e4c8b50fdb34636ce7bc0b9a9e015191455d750709fc"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20CappedUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:11",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "_cap",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:12"
            },
            {
              "contract": "ERC20CappedUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol:42"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "571885c656798930af54166c8c4712b17f6ababbc77f90719256b2ca68684860",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/interfaces/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts/interfaces/IPancakeFactory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AggregatorMock": {
        "src": "contracts/mock/AggregatorMock.sol:7",
        "version": {
          "withMetadata": "1d828f36622a8866ceac7b9e80198d797148d4e4960d22450e19eddb4f778f0b",
          "withoutMetadata": "c674b9f36f8253145f81a4461a1f52447ccd57a05d1515426232102b71e680f1",
          "linkedWithoutMetadata": "c674b9f36f8253145f81a4461a1f52447ccd57a05d1515426232102b71e680f1"
        },
        "inherit": [
          "Initializable",
          "AggregatorV3Interface"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint8,int256)",
          "decimals()",
          "description()",
          "version()",
          "latestRoundData()",
          "getRoundData(uint80)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_round",
            "src": "contracts/mock/AggregatorMock.sol:8"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_time",
            "src": "contracts/mock/AggregatorMock.sol:9"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_description",
            "src": "contracts/mock/AggregatorMock.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AggregatorMock",
              "label": "_round",
              "type": "t_uint80",
              "src": "contracts/mock/AggregatorMock.sol:8"
            },
            {
              "contract": "AggregatorMock",
              "label": "_time",
              "type": "t_uint256",
              "src": "contracts/mock/AggregatorMock.sol:9"
            },
            {
              "contract": "AggregatorMock",
              "label": "_description",
              "type": "t_string_storage",
              "src": "contracts/mock/AggregatorMock.sol:10"
            },
            {
              "contract": "AggregatorMock",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/mock/AggregatorMock.sol:11"
            },
            {
              "contract": "AggregatorMock",
              "label": "_answer",
              "type": "t_int256",
              "src": "contracts/mock/AggregatorMock.sol:12"
            }
          ],
          "types": {
            "t_uint80": {
              "label": "uint80"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_int256": {
              "label": "int256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeFactoryMock": {
        "src": "contracts/mock/PancakeRouterMock.sol:36",
        "version": {
          "withMetadata": "18477dc10d1f3017becbf2a41d6939007f1727657ab1d3f11ceaf85f7b0dfc83",
          "withoutMetadata": "9f65953e23726b61cb31460b8bd847616df3a86bc582b7c710f2fa25ac08b8ab",
          "linkedWithoutMetadata": "9f65953e23726b61cb31460b8bd847616df3a86bc582b7c710f2fa25ac08b8ab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PancakeFactoryMock",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/mock/PancakeRouterMock.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakePairMock": {
        "src": "contracts/mock/PancakeRouterMock.sol:53",
        "version": {
          "withMetadata": "5066fe336cd7e1b83a061bd5689026b292cacc36cc2ecdb36abe6c0002e53eda",
          "withoutMetadata": "b59e0a7b68b1eb01f6405fb9bec8654c1c152eced1e01da0fbd787586e8830a2",
          "linkedWithoutMetadata": "b59e0a7b68b1eb01f6405fb9bec8654c1c152eced1e01da0fbd787586e8830a2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "reservesA()",
          "reservesB()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakePairMock",
            "src": "contracts/mock/PancakeRouterMock.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakePairMock",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts/mock/PancakeRouterMock.sol:54"
            },
            {
              "contract": "PancakePairMock",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts/mock/PancakeRouterMock.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouterMock": {
        "src": "contracts/mock/PancakeRouterMock.sol:7",
        "version": {
          "withMetadata": "884e3481b54132d4115fde3aa3c404cc86a3b8299b395893bb09b13246913099",
          "withoutMetadata": "a967384d4717400f820afb3a34147d173e0c7f3455853dd93ec7dabd9a4faf24",
          "linkedWithoutMetadata": "a967384d4717400f820afb3a34147d173e0c7f3455853dd93ec7dabd9a4faf24"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "createPair(address,address)",
          "addLiquidity(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouterMock",
            "src": "contracts/mock/PancakeRouterMock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeRouterMock",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/mock/PancakeRouterMock.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlPausableUpgradeable": {
        "src": "contracts/utils/AccessControlPausableUpgradeable.sol:7",
        "inherit": [
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "grantPauserRole(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "PAUSER_ROLE",
            "src": "contracts/utils/AccessControlPausableUpgradeable.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlPausableUpgradeable",
              "label": "PAUSER_ROLE",
              "type": "t_bytes32",
              "src": "contracts/utils/AccessControlPausableUpgradeable.sol:9"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RedPillERC20": {
        "src": "contracts/utils/RedPillERC20.sol:7",
        "inherit": [
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlPausableUpgradeable",
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burned()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "RedPillERC20",
              "label": "burned_",
              "type": "t_uint256",
              "src": "contracts/utils/RedPillERC20.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/utils/Token.sol:6",
        "version": {
          "withMetadata": "a2a0f3d75a79b447b238a15d83170b0a8c92f300514610f04d2d49c85c528c1c",
          "withoutMetadata": "220024b2d6a01aefadf2d1198c88c14432098c7dd7b221bc20f7a224b3cae416",
          "linkedWithoutMetadata": "220024b2d6a01aefadf2d1198c88c14432098c7dd7b221bc20f7a224b3cae416"
        },
        "inherit": [
          "RedPillERC20",
          "ERC20CappedUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "AccessControlPausableUpgradeable",
          "PausableUpgradeable",
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/utils/Token.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}